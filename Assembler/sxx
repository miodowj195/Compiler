#!/usr/bin/perl -w

use strict;

# add the keyboard to the end of the file list
push @ARGV, "-";

my $MEMSZ = 16384;
my @mem = (0) x $MEMSZ;

# internal registers
my $PC = 0;
my $temp;

# $$SP = $mem[0]
my $SP = \$mem[0];

# processor flags
# set haltflag to 1 to stop the program
my $haltflag = 0;
# set trace to 1 to trace program execution
my $traceflag = 0;
# set to "-" for executables assembled without the CALLS instruction
# set to "+" for executables assembled with the CALLS instruction
my $sxx_format = "";
# set debug to a value larger than zero to print debugging information
my $debug = 0;

sub opBKPT {
    print "BKPT\n" if $debug > 0;
    die "unimplemented operation\n";
}

sub opPUSH {
    my $addr = &getmem($PC++);
    print "PUSH $addr\n" if $debug > 0;
    &push(&getmem($addr));
}

sub opPUSHV {
    my $val = &getmem($PC++);
    print "PUSHV $val\n" if $debug > 0;
    &push($val);
}

sub opPUSHS {
    print "PUSHS\n" if $debug > 0;
    &push(&getmem(&pop()));
}

sub opPUSHX {
    my $addr = &getmem($PC++);
    print "PUSHX $addr\n" if $debug > 0;
    &push(&getmem(&pop() + $addr));
}

sub opPOP {
    my $addr = &getmem($PC++);
    print "POP $addr\n" if $debug > 0;
    &setmem($addr, &pop());
}

sub opPOPS {
    print "POPS\n" if $debug > 0;
    $temp = &pop();
    &setmem(&pop(), $temp);
}

sub opPOPX {
    my $addr = &getmem($PC++);
    print "POPX $addr\n" if $debug > 0;
    $temp = &pop();
    &setmem(&pop()+$addr, $temp);
}

sub opDUPL {
    print "DUPL\n" if $debug > 0;
    &push(&getmem($$SP));
}

sub opSWAP {
    print "SWAP\n" if $debug > 0;
    $temp = &getmem($$SP);
    &setmem($$SP, &getmem($$SP+1));
    &setmem($$SP+1, $temp);
}

sub opOVER {
    print "OVER\n" if $debug > 0;
    &push(&getmem($$SP+1));
}

sub opDROP {
    print "DROP\n" if $debug > 0;
    $$SP++;
}

sub opROT {
    print "ROT\n" if $debug > 0;
    $temp = &getmem($$SP);
    &setmem($$SP, &getmem($$SP+2));
    &setmem($$SP+2, &getmem($$SP+1));
    &setmem($$SP+1, $temp);
}

sub opTSTLT {
    print "TSTLT\n" if $debug > 0;
    $temp = &pop();
    &push($temp < 0 ? 1 : 0);
}
 
sub opTSTLE {
    print "TSTLE\n" if $debug > 0;
    $temp = &pop();
    &push($temp <= 0 ? 1 : 0);
}
 
sub opTSTGT {
    print "TSTGT\n" if $debug > 0;
    $temp = &pop();
    &push($temp > 0 ? 1 : 0);
}
 
sub opTSTGE {
    print "TSTGE\n" if $debug > 0;
    $temp = &pop();
    &push($temp >= 0 ? 1 : 0);
}
 
sub opTSTEQ {
    print "TSTEQ\n" if $debug > 0;
    $temp = &pop();
    &push($temp == 0 ? 1 : 0);
}
 
sub opTSTNE {
    print "TSTNE\n" if $debug > 0;
    $temp = &pop();
    &push($temp != 0 ? 1 : 0);
}
 
sub opBNE {
    my $addr = &getmem($PC++);
    print "BNE $addr\n" if $debug > 0;
    if (&pop() != 0) {
	$PC = $addr;
    }
}

sub opBEQ {
    my $addr = &getmem($PC++);
    print "BEQ $addr\n" if $debug > 0;
    if (&pop() == 0) {
	$PC = $addr;
    }
}

sub opBR {
    my $addr = &getmem($PC++);
    print "BR $addr\n" if $debug > 0;
    $PC = $addr;
}

sub opCALL {
    my $addr = &getmem($PC++);
    print "CALL $addr\n" if $debug > 0;
    &push($PC);
    $PC = $addr;
}

sub opCALLS {
    print "CALLS\n" if $debug > 0;
    $temp = &pop();
    &push($PC);
    $PC = $temp;
}

sub opRETURN {
    print "RETURN\n" if $debug > 0;
    $PC = &pop();
}

sub opRETN {
    my $val = &getmem($PC++);
    print "RETN $val\n" if $debug > 0;
    $temp = &pop();
    $$SP += $val;
    $PC = $temp;
}

sub opHALT {
    print "HALT\n" if $debug > 0;
    $haltflag = 1;
}

sub opADD {
    print "ADD\n" if $debug > 0;
    $temp = &pop();
    &push(&pop() + $temp);
}

sub opSUB {
    print "SUB\n" if $debug > 0;
    $temp = &pop();
    &push(&pop() - $temp);
}

sub opMUL {
    print "MUL\n" if $debug > 0;
    $temp = &pop();
    &push(&pop() * $temp);
}

sub opDIV {
    print "DIV\n" if $debug > 0;
    $temp = &pop();
    if ($temp == 0) {
	warn "attempt to divide by zero\n";
	$haltflag = 1;
    }
    &push(&pop() / $temp);
}

sub opMOD {
    print "MOD\n" if $debug > 0;
    $temp = &pop();
    if ($temp == 0) {
	warn "attempt to take modulus by zero\n";
	$haltflag = 1;
    }
    &push(&pop() % $temp);
}

sub opOR {
    print "OR\n" if $debug > 0;
    $temp = &pop();
    &push(&pop() || $temp ? 1 : 0);
}

sub opAND {
    print "AND\n" if $debug > 0;
    $temp = &pop();
    &push(&pop() && $temp ? 1 : 0);
}

sub opXOR {
    print "XOR\n" if $debug > 0;
    $temp = &pop();
    &push(&xxxor(&pop(), $temp)); 
}

sub opNOT {
    print "NOT\n" if $debug > 0;
    &push(&pop() ? 0 : 1);
}

sub opNEG {
    print "NEG\n" if $debug > 0;
    &push(-&pop());
}

sub opADDX {
    my $addr = &getmem($PC++);
    print "ADDX $addr\n" if $debug > 0;
    &push(&pop() + $addr);
}

sub opADDSP {
    my $val = &getmem($PC++);
    print "ADDSP $val\n" if $debug > 0;
    $$SP += $val;
}

sub opREAD {
    my $val = &readint();
    print "READ [$val]\n" if $debug > 0;
    &push($val);
}

sub opPRINT {
    $temp = &pop();
    print "PRINT [$temp]\n" if $debug > 0;
    printf "%d", $temp;
}

sub opREADC {
    my $val = &readc();
    print "READC [$val]\n" if $debug > 0;
    &push($val);
}

sub opPRINTC {
    $temp = &pop();
    print "PRINTC [$temp]\n" if $debug > 0;
    printf "%c", $temp;
}

sub opTRON {
    print "TRON\n" if $debug > 0;
    $traceflag = 1;
}

sub opTROFF {
    print "TROFF\n" if $debug > 0;
    $traceflag = 0;
}

sub opDUMP {
    print "DUMP\n" if $debug > 0;
    $temp = &pop();
    my $start = &pop();
    die "illegal dump range: $start to $temp\n"
	unless &okmem($start) and &okmem($temp) and $start <= $temp;
    print "\nMemory dump from $start to $temp:\n";
    for (my $i=$start ; $i<=$temp ; $i++) {
	printf "    mem[%5d]=%11d\n", $i, &getmem($i);
    }
    print "\n";
}

sub okmem {
    my $a = shift;
    return $a >= 0 && $a < $MEMSZ;
}

sub check_numeric {
    my $n = shift;
    die "illegal executable module format\n" unless defined $n;
    die "non-numeric value: $n\n" unless $n == 0 + $n;
}

my @optab = (
    \&opBKPT,
    \&opPUSH,
    \&opPUSHV,
    \&opPUSHS,
    \&opPUSHX,
    \&opPOP,
    \&opPOPS,
    \&opPOPX,
    \&opDUPL,
    \&opSWAP,
    \&opOVER,
    \&opDROP,
    \&opROT,
    \&opTSTLT,
    \&opTSTLE,
    \&opTSTGT,
    \&opTSTGE,
    \&opTSTEQ,
    \&opTSTNE,
    \&opBNE,
    \&opBEQ,
    \&opBR,
    \&opCALL,
    \&opCALLS,
    \&opRETURN,
    \&opRETN,
    \&opHALT,
    \&opADD,
    \&opSUB,
    \&opMUL,
    \&opDIV,
    \&opMOD,
    \&opOR,
    \&opAND,
    \&opXOR,
    \&opNOT,
    \&opNEG,
    \&opADDX,
    \&opADDSP,
    \&opREAD,
    \&opPRINT,
    \&opREADC,
    \&opPRINTC,
    \&opTRON,
    \&opTROFF,
    \&opDUMP
);

my $OPTABSZ = scalar @optab;

sub skip1 {
    while (<>) {
	last unless m/^#/;
	do { $debug = 1; next} if m/^#debug$/;
	do { $debug = $1 ; next} if m/#debug=(\d+)/;
    }
    $_ = "" unless defined $_;
}

sub skip {
    while (<>) {
	last unless m/^#/;
    }
    $_ = "" unless defined $_;
}

my $inputline = "";
my $inputEOF = 0;

sub readc {
    return -1 if $inputEOF;
    $inputline = <> unless $inputline;
    unless ($inputline) {
	$inputEOF = 1;
	return -1;
    }
    $inputline =~ s/^.//ms;
    return ord($&);
}

sub readint {
    die "attempt to READ past end of file\n" if $inputEOF;
LOOP:
    $inputline = <> unless $inputline;
    unless ($inputline) {
	$inputEOF = 1;
	die "attempt to READ past end of file\n";
    }
    $inputline =~ s/^\s*//ms; # skip leading whitespace
    goto LOOP if length($inputline) == 0;
    $inputline =~ s/^[+-]{0,1}\d+//ms # grab the digits
	or die "attempt to READ non-numeric input: $inputline\n";
    return $&+0;
}

$|++; # don't buffer standard output

my $textlen = 0;  # text length
my $entry = 0;    # entry point
my $base = 0;      # base location

$base = 16 + int(rand()*985); # $base should be between 16 and 1000
print "base=$base\n" if $debug;

my $n;     # the first field in the current line

my $SXX = <>;
die "illegal executable module format\n" unless $SXX =~ m/^%SXX([-+])E/;
$sxx_format = $1; # "+" with CALLS, "-" without

# get the text length
&skip1();
($n) = split;
die "missing text length\n" unless defined $n;
&check_numeric($n);
$textlen = $n;
print "textlen=$textlen\n" if $debug;
die "illegal text length\n" if $textlen <= 0 or $textlen > $MEMSZ-1000;

# get the entry point (if it exists)
&skip();
($n) = split;
die "missing entry point\n" unless defined $n; # might be '%', however
if ($n ne "\%") {
    &check_numeric($n);
    $entry = $n + $base;
    print "entry=$entry\n" if $debug;
    &skip();
    ($n) = split;
}

# deposit the program into memory
my $loc = 0;   # location counter
while (1) {
    &skip();
    ($n) = split;
    die "illegal executable module format\n" unless defined $n;
    last if $n eq "\%";
    if ($n =~ s/^://) {
	&check_numeric($n);
	print "BSS $n\n" if $debug;
	$loc += $n;
    } else {
	&check_numeric($n);
	my $lloc = $base + $loc++;
	print "mem[$lloc]=$n\n" if $debug;
	$mem[$lloc] = $n;
    }
}

die "text length does not match text contents\n" unless $loc == $textlen;

print "$_\n" if $debug;
# process the relocation dictionary entries
while (1) {
    &skip();
    ($n) = split;
    last if $n eq "\%";
    &check_numeric($n);
    die "illegal relocation entry\n" unless $n >= 0 and $n < $textlen;
    my $lloc = $base + $n;
    print "relocating memory at $lloc\n" if $debug;
    $mem[$lloc] += $base;
}

$PC = $entry;

sub doOP {
    my $opcode = &getmem($PC++);
    # handle executables linked before the CALLS instruction
    $opcode++ if $opcode > 22 and $sxx_format eq "-";
    die "Illegal OP code\n" unless $opcode >= 0 and $opcode < $OPTABSZ;
    &{$optab[$opcode]}();
}
  
sub push {
    my $x = shift;
    &setmem(--$$SP, $x);
}

sub pop {
    return &getmem($$SP++);
}

sub getmem {
    my $addr = shift;
    die "memory address out of range\n" unless &okmem($addr);
    return $mem[$addr];
}

sub setmem {
    my $addr = shift;
    die "memory address out of range\n" unless &okmem($addr);
    my $val = shift;
    $mem[$addr] = $val;
}

sub xxxor {
    my $a = shift;
    my $b = shift;
    return (!($a && $b) && ($a || $b)) ? 1 : 0;
}

print "executing ...\n" if $debug;

open STDIN, "< /dev/tty" if scalar @ARGV == 0;

$haltflag = 0;
$$SP = $MEMSZ;
while(1) {
    last if $haltflag;
    &doOP();
}
